
/* 
 * Problem : 
 * Find the largest palindrome made from the product of two 3-digit numbers which is less than N .
 * 
 * A palindromic number reads the same both ways. 
 * The smallest 6 digit palindrome made from the product of two 3-digit numbers is 101101 = 143 * 707. 
 * 
 * 
 * Sample Input :
 * 2
   101110
   800000
 * 
 * 
 * Sample Output :
 * 101101
   793397
 * 
 * 
 * Explanation 
 * 101101 is product of 143 and 707.
   793397 is product of 869 and 913.
 * 
 * */

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class Max_Palindrom_Product {

	public static void main(String[] args) {
		
		// Number of inputs
		Scanner in = new Scanner(System.in);
		int t = in.nextInt();
		
		// Take input One by One
		for (int a0 = 0; a0 < t; a0++) {
 
			int n = in.nextInt();
			
			// A list containing all palindrome product
			List<Integer> paliList = new ArrayList<Integer>();

			// A loop for multiple of two number and check product is palindrome or not
			// if Product is palindrome and less than given number then store into a list.
			
			for (int num1 = 100; num1 <= 999; num1++) {
				for (int num2 = 100; num2 <= 999; num2++) {
					int product = num1 * num2;
					if (product < n && isPalindrome(product)) {
						paliList.add(product);
					}
				}
			}

			// Print maximum of the list.
			System.out.println(Collections.max(paliList));
		}
	}

	/**
	 * @param number
	 * @return Is
	 */
	static boolean isPalindrome(int number) {
		int oldNum = number;
		int newNum = 0;
		while (number > 0) {
			newNum = (newNum * 10) + number % 10;
			number = number / 10;
		}
		return oldNum == newNum;
	}
}
